<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>博客更新</title>
    <link href="/2024/07/18/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0/"/>
    <url>/2024/07/18/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<p>在网上冲浪的时候，无意中发现了谷歌分析这一网站分析利器，只一眼便决定将个人博客接入谷歌分析。不过网上的信息有点不全，一直无法成功，最终还是决定使用谷歌分析官网上提供的方式，在代码中加入以下信息（找一个都有的js文件中添加）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ga.js</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 创建一个脚本标签</span><br>  <span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br>  script.<span class="hljs-property">async</span> = <span class="hljs-literal">true</span>;<br>  script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;https://www.googletagmanager.com/gtag/js?id=谷歌分析id&#x27;</span>;<br><br>  <span class="hljs-comment">// 将脚本标签插入到 head 中</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(script);<br><br>  <span class="hljs-comment">// 加载完成后执行</span><br>  script.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">dataLayer</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">dataLayer</span> || [];<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">gtag</span>(<span class="hljs-params"></span>)&#123;dataLayer.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">arguments</span>);&#125;<br>    <span class="hljs-title function_">gtag</span>(<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-title function_">gtag</span>(<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;谷歌分析id&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;已经接入谷歌分析！&quot;</span>);<br>  &#125;;<br>&#125;)();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>sklearn</title>
    <link href="/2023/10/03/%E5%BC%80%E5%A7%8B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%89%8D%EF%BC%9A%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/10/03/%E5%BC%80%E5%A7%8B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%89%8D%EF%BC%9A%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="开始机器学习之前：配置开发环境"><a href="#开始机器学习之前：配置开发环境" class="headerlink" title="开始机器学习之前：配置开发环境"></a>开始机器学习之前：配置开发环境</h2><iframe src='https://mozilla.github.io/pdf.js/web/viewer.html?file=https://ajieio.github.io/pdf/pdf1.pdf' style='width:100%;height:940px'></iframe><h2 id="1-决策树"><a href="#1-决策树" class="headerlink" title="1-决策树"></a>1-决策树</h2><iframe src='https://mozilla.github.io/pdf.js/web/viewer.html?file=https://ajieio.github.io/pdf/pdf2.pdf' style='width:100%;height:940px'></iframe><h2 id="2-随机森林"><a href="#2-随机森林" class="headerlink" title="2-随机森林"></a>2-随机森林</h2><iframe src='https://uipv4.zywvvd.com:33030/HexoFiles/js/vvd_js/pdfjs/web/viewer.html?file=https://ajieio.github.io/pdf/pdf3.pdf' style='width:100%;height:940px'></iframe><h2 id="3-特征工程"><a href="#3-特征工程" class="headerlink" title="3-特征工程"></a>3-特征工程</h2><iframe src='https://uipv4.zywvvd.com:33030/HexoFiles/js/vvd_js/pdfjs/web/viewer.html?file=https://ajieio.github.io/pdf/pdf4.pdf' style='width:100%;height:940px'></iframe><h2 id="4-降维算法"><a href="#4-降维算法" class="headerlink" title="4-降维算法"></a>4-降维算法</h2><iframe src='https://uipv4.zywvvd.com:33030/HexoFiles/js/vvd_js/pdfjs/web/viewer.html?file=https://ajieio.github.io/pdf/pdf5.pdf' style='width:100%;height:940px'></iframe><h2 id="5-逻辑回归"><a href="#5-逻辑回归" class="headerlink" title="5-逻辑回归"></a>5-逻辑回归</h2><iframe src='https://uipv4.zywvvd.com:33030/HexoFiles/js/vvd_js/pdfjs/web/viewer.html?file=https://ajieio.github.io/pdf/pdf6.pdf' style='width:100%;height:940px'></iframe><h2 id="6-聚类算法"><a href="#6-聚类算法" class="headerlink" title="6-聚类算法"></a>6-聚类算法</h2><iframe src='https://uipv4.zywvvd.com:33030/HexoFiles/js/vvd_js/pdfjs/web/viewer.html?file=https://ajieio.github.io/pdf/pdf7.pdf' style='width:100%;height:940px'></iframe><h2 id="7-SVM"><a href="#7-SVM" class="headerlink" title="7-SVM"></a>7-SVM</h2><iframe src='https://uipv4.zywvvd.com:33030/HexoFiles/js/vvd_js/pdfjs/web/viewer.html?file=https://ajieio.github.io/pdf/pdf8.pdf' style='width:100%;height:940px'></iframe><h2 id="8-SVM案例"><a href="#8-SVM案例" class="headerlink" title="8-SVM案例"></a>8-SVM案例</h2><iframe src='https://uipv4.zywvvd.com:33030/HexoFiles/js/vvd_js/pdfjs/web/viewer.html?file=https://ajieio.github.io/pdf/pdf9.pdf' style='width:100%;height:940px'></iframe><h2 id="9-线性回归"><a href="#9-线性回归" class="headerlink" title="9-线性回归"></a>9-线性回归</h2><iframe src='https://uipv4.zywvvd.com:33030/HexoFiles/js/vvd_js/pdfjs/web/viewer.html?file=https://ajieio.github.io/pdf/pdf10.pdf' style='width:100%;height:940px'></iframe><h2 id="10-朴素贝叶斯"><a href="#10-朴素贝叶斯" class="headerlink" title="10-朴素贝叶斯"></a>10-朴素贝叶斯</h2><iframe src='https://uipv4.zywvvd.com:33030/HexoFiles/js/vvd_js/pdfjs/web/viewer.html?file=https://ajieio.github.io/pdf/pdf11.pdf' style='width:100%;height:940px'></iframe><h2 id="11-XGBoost"><a href="#11-XGBoost" class="headerlink" title="11-XGBoost"></a>11-XGBoost</h2><iframe src='https://uipv4.zywvvd.com:33030/HexoFiles/js/vvd_js/pdfjs/web/viewer.html?file=https://ajieio.github.io/pdf/pdf12.pdf' style='width:100%;height:940px'></iframe><h2 id="12-神经网络"><a href="#12-神经网络" class="headerlink" title="12-神经网络"></a>12-神经网络</h2><iframe src='https://uipv4.zywvvd.com:33030/HexoFiles/js/vvd_js/pdfjs/web/viewer.html?file=https://ajieio.github.io/pdf/pdf13.pdf' style='width:100%;height:940px'></iframe>]]></content>
    
    
    <categories>
      
      <category>sklearn学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>机器学习</tag>
      
      <tag>sklearn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习环境安装与配置</title>
    <link href="/2023/09/23/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/09/23/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-安装CUDA"><a href="#1-安装CUDA" class="headerlink" title="1.安装CUDA"></a>1.安装CUDA</h2><h3 id="1-安装Anaconda；"><a href="#1-安装Anaconda；" class="headerlink" title="1.安装Anaconda；"></a>1.安装Anaconda；</h3><h3 id="2-安装配置CUDA"><a href="#2-安装配置CUDA" class="headerlink" title="2.安装配置CUDA"></a>2.安装配置CUDA</h3><h4 id="1-下载CUDA并安装"><a href="#1-下载CUDA并安装" class="headerlink" title="(1) 下载CUDA并安装"></a>(1) 下载CUDA并安装</h4><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230923204132242.png" alt="image-20230923204132242"></p><p>详细步骤</p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230923204213468.png" alt="image-20230923204213468"></p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230923204222929.png" alt="image-20230923204222929"></p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230923204230459.png" alt="image-20230923204230459"></p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230923204237179.png" alt="image-20230923204237179"></p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230923204243438.png" alt="image-20230923204243438"></p><h4 id="2-检查CUDA安装是否成功："><a href="#2-检查CUDA安装是否成功：" class="headerlink" title="(2) 检查CUDA安装是否成功："></a>(2) 检查CUDA安装是否成功：</h4><p>   进入cmd，输入<code>nvcc –V</code>，出现左下图结果，则完成安装；</p><h4 id="3-配置环境变量："><a href="#3-配置环境变量：" class="headerlink" title="(3) 配置环境变量："></a>(3) 配置环境变量：</h4><p>   \1) 右击我的电脑，选择“属性”，选择“高级系统设置”，点击“环境变量”;</p><p>   \2) 找到“Path”，添加CUDA安装路径下的相关环境变量，如由下图。例如：</p><p>​      C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.5\bin</p><p>​      C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.5\libnvvp</p><p>   \3) 添加完毕，点击“应用”与“确定”按钮。完成配置。</p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230923204936142.png" alt="image-20230923204936142"></p><h2 id="2-配置cuDNN"><a href="#2-配置cuDNN" class="headerlink" title="2.配置cuDNN"></a>2.配置cuDNN</h2><p>1.将下载的好的cuDNN文件解压，得到“bin”“include”“lib”文件夹；</p><p>2.将cuDNN解压后三个文件夹内的内容分别复制到CUDA安装路径下对应的3个文件夹内去；类似于左下图所示；</p><p>3.验证是否配置成功，首先win+R启动cmd，cd到安装目录下的…\extras\demo_suite,然后分别执行<code>bandwidthTest.exe</code>和<code>deviceQuery.exe</code>；类似于右下图则配置成功。</p><p><img src="/../img/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230923205118953.png" alt="image-20230923205118953"></p><h2 id="3-安装Pytorch"><a href="#3-安装Pytorch" class="headerlink" title="3. 安装Pytorch"></a>3. 安装Pytorch</h2><p>(1)选择适配于CUDA版本的Pytorch。示例CUDA为V11.6，我们选择1.9.0torch；</p><p>(2)为了避免多个项目工程之间的torch版本不统一带来的问题，我们通过建立项目虚拟环境的方式，对不同版本的torch进行管理。也即：在虚拟环境中安装torch；</p><p>\4. 创建虚拟环境</p><p>(1)打开“开始”菜单，找到“Anaconda Prompt”，双击运行；</p><p>(2)输入： <code>conda create -n mypytorch python=3.7</code></p><p>​         其中， mypytorch为环境名称，可以自己定义，选择英文名称；</p><p>​                python&#x3D;3.7为python版本，一般和torch版本及工程语言对应；</p><p>(3)出现“Yes”or“No”的选项，点击Yes，继续安装，直到环境创建完成。</p><p>Tip：创建虚拟环境可能会因网速原因，导致比较慢，请耐心等待。后续安装torch的时候，我们可以采用清华源进行安装，提高安装速度。        </p><p>\3. 安装Pytorch</p><p>(4)环境配置成功，激活环境：<code>conda activate mypytorch</code>，进入虚拟环境；</p><p>(5)在虚拟环境下，安装torch1.9.0</p><p>  <code> pip install torch==1.9.0+cu111 torchvision==0.10.0+cu111 torchaudio==0.9.0 -f https://download.pytorch.org/whl/torch_stable.html</code></p><p>Tip: 如果速度比较慢，可以使用清华源下载：</p><p>   <code>pip install torch==1.9.0+cu111 torchvision==0.10.0+cu111 torchaudio===0.9.0 -f https://download.pytorch.org/whl/torch_stable.html -i *https://pypi.tuna.tsinghua.edu.cn/simple</code></p><p>   或</p><p>   <code>pip3 install torch==1.9.0+cu111 torchvision==0.10.0+cu111 torchaudio===0.9.0 -f https://download.pytorch.org/whl/torch_stable.html -i *https://pypi.tuna.tsinghua.edu.cn/simple</code></p><p>   等待所有的安装自行结束，则完成安装。</p><p>\4. 验证Pytorch</p><p>(1)验证安装是否全部完成；</p><p>   输入：<code>python</code>，出现python代码指示，并显示python版本号，与创建环境时的python版本应该是一致的；</p><p>   手动分别输入以下代码，每输入一行，按enter键；</p><p>   <code>import torch</code></p><p>   <code>torch.__version__  </code>  这时会出现‘1.9.0+cu111’的提示，表示安装完成；</p><p>(2)此时，就可以使用自己的示例代码工程，开展深度学习调试工作了。</p><p>备注：</p><p>​    以上配置工作仅仅完成了深度学习的基础环境配置工作，更多的调试，往往需要结合具体项目代码，不断的运行工程代码，根据提示补充该项目工程所需要的依赖库，例如：opencv等库，基本都使用<em>pip install + …</em>的方式来安装。</p><h2 id="4-安装文件"><a href="#4-安装文件" class="headerlink" title="4.安装文件"></a>4.安装文件</h2><p>cuda_11.1.1_456.81_win10.exe:</p><p><a href="https://cloud.189.cn/web/share?code=7r2EB3RfAJb2%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9Ae0zr%EF%BC%89">https://cloud.189.cn/web/share?code=7r2EB3RfAJb2（访问码：e0zr）</a></p><p>cudnn-11.3-windows-x64-v8.2.1.32:</p><p><a href="https://cloud.189.cn/web/share?code=6rMNB3aUfAju%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9A8qcu%EF%BC%89">https://cloud.189.cn/web/share?code=6rMNB3aUfAju（访问码：8qcu）</a></p>]]></content>
    
    
    <categories>
      
      <category>神经网络与深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>神经网络与深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>标注工具</title>
    <link href="/2023/09/04/%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/09/04/%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<p><img src="/../img/%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7/image-20230904191257311.png" alt="image-20230904191257311"></p><p>每一步都会存储在内存中，随后渲染到界面上</p>]]></content>
    
    
    <categories>
      
      <category>标新取异</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>bug及解决方案</title>
    <link href="/2023/08/26/six/"/>
    <url>/2023/08/26/six/</url>
    
    <content type="html"><![CDATA[<h2 id="ImportError-cannot-import-name-six"><a href="#ImportError-cannot-import-name-six" class="headerlink" title="ImportError: cannot import name &#39;six&#39;"></a><code>ImportError: cannot import name &#39;six&#39;</code></h2><div class="note note-danger">            <p>ImportError: cannot import name ‘six’</p>          </div><p>解决方案:</p><p>将<code> from django.utils import six</code></p><p>改成：</p><p><code>import six</code></p><p><img src="/../img/six/image-20230826174452939.png" alt="image-20230826174452939"></p><h2 id="django-db-utils-NotSupportedError-MySQL-8-or-later-is-required-found-5-7-31"><a href="#django-db-utils-NotSupportedError-MySQL-8-or-later-is-required-found-5-7-31" class="headerlink" title="django.db.utils.NotSupportedError: MySQL 8 or later is required (found 5.7.31)."></a><code>django.db.utils.NotSupportedError: MySQL 8 or later is required (found 5.7.31).</code></h2><div class="note note-danger">            <p>django.db.utils.NotSupportedError: MySQL 8 or later is required (found 5.7.31).</p>          </div><p><img src="/../img/six/image-20230826180941450.png" alt="image-20230826180941450"></p><h1 id="bootstrap模态框自动给body加padding，导致页面抖动"><a href="#bootstrap模态框自动给body加padding，导致页面抖动" class="headerlink" title="bootstrap模态框自动给body加padding，导致页面抖动"></a>bootstrap模态框自动给body加padding，导致页面抖动</h1><p>加上以上样式解决问题</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span><span class="hljs-selector-class">.modal-open</span> &#123;<br>    <span class="hljs-attribute">overflow-y</span>: auto <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bug</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1～n这n个整数的十进制表示中1出现的次数</title>
    <link href="/2023/08/24/num1/"/>
    <url>/2023/08/24/num1/</url>
    
    <content type="html"><![CDATA[<p>输入一个整数 <code>n</code> ，求1～n这n个整数的十进制表示中1出现的次数。</p><p>例如，输入12，1～12这些整数中包含1 的数字有1、10、11和12，1一共出现了5次。</p><p><strong>示例 1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：n <span class="hljs-operator">=</span> <span class="hljs-number">12</span><br>输出：<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：n <span class="hljs-operator">=</span> <span class="hljs-number">13</span><br>输出：<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><strong>限制：</strong></p><ul><li><code>1 &lt;= n &lt; 2^31</code></li></ul><h2 id="一、for循环"><a href="#一、for循环" class="headerlink" title="一、for循环"></a>一、for循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">countDigitOne</span>(<span class="hljs-params">self, n</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type n: int</span><br><span class="hljs-string">        :rtype: int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        num = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>            item_str = <span class="hljs-built_in">str</span>(item)<br>            <span class="hljs-keyword">for</span> item_srt_one <span class="hljs-keyword">in</span> item_str:<br>                <span class="hljs-keyword">if</span> item_srt_one == <span class="hljs-string">&#x27;1&#x27;</span>:<br>                    num += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> num<br>s = Solution()<br></code></pre></td></tr></table></figure><p>最终报错–&lt;内存溢出&gt;</p><p><img src="/../img/1-num/image-20230824213104452.png" alt="image-20230824213104452"></p><h2 id="二、找规律"><a href="#二、找规律" class="headerlink" title="二、找规律"></a>二、找规律</h2><p><img src="/../img/num1/image-20230824230315261.png" alt="image-20230824230315261"></p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>标新取异项目</title>
    <link href="/2023/08/20/bz1/"/>
    <url>/2023/08/20/bz1/</url>
    
    <content type="html"><![CDATA[<h2 id="video"><a href="#video" class="headerlink" title="video"></a>video</h2><h3 id="数据库设计-暂行"><a href="#数据库设计-暂行" class="headerlink" title="数据库设计(暂行)"></a>数据库设计(暂行)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Course</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;课程类&quot;&quot;&quot;</span><br>    title = models.CharField(max_length=<span class="hljs-number">100</span>)<br>    description = models.TextField()<br>    created_at = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.title<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Lesson</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;课程中的单节课类&quot;&quot;&quot;</span><br>    course = models.ForeignKey(Course, on_delete=models.CASCADE)<br>    title = models.CharField(max_length=<span class="hljs-number">100</span>)<br>    video = models.FileField(upload_to=<span class="hljs-string">&#x27;lessons/&#x27;</span>)<br>    sequence = models.PositiveIntegerField()  <span class="hljs-comment"># 正整数，课程中课的顺序</span><br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        ordering = [<span class="hljs-string">&#x27;sequence&#x27;</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.title<br><br></code></pre></td></tr></table></figure><p>在这个设计中，我们新增了一个名为 <code>sequence</code> 的正整数字段来表示课程中每一节课的顺序。我们还在 <code>Meta</code> 类中使用 <code>ordering</code> 属性对 <code>Lesson</code> 模型的查询结果进行排序，以保证按照顺序返回课程。</p><p>当你创建新的 <code>Lesson</code> 对象时，请确保为 <code>sequence</code> 字段赋予适当的值，以确保课程的顺序是正确的。你可以使用合适的逻辑来管理和维护 <code>sequence</code> 字段的值。</p><p>通过这种方式，你可以在检索特定课程的所有课程时，按照顺序返回课程对象列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py makemigrations  <br>python manage.py migrate <br></code></pre></td></tr></table></figure><h3 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h3><h4 id="一、iframe配置问题"><a href="#一、iframe配置问题" class="headerlink" title="一、iframe配置问题"></a>一、iframe配置问题</h4><p>要解决在 Django 项目中设置 ‘X-Frame-Options’ 导致的错误，你可以按照以下步骤进行配置：</p><ol><li>在你的 Django 项目的设置文件（<code>settings.py</code>）中找到 <code>MIDDLEWARE</code> 配置选项。它包含了一个中间件类列表，这些中间件按照顺序在请求和响应之间进行处理。</li><li>确保以下三个中间件类在 <code>MIDDLEWARE</code> 列表中存在，并且按照相应的顺序排列：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">MIDDLEWARE = [<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>    <span class="hljs-comment"># ...</span><br>]<br></code></pre></td></tr></table></figure><p><code>SecurityMiddleware</code> 和 <code>XFrameOptionsMiddleware</code> 是 Django 提供的中间件，用于处理安全相关的功能和 X-Frame-Options 设置。</p><ol><li>检查 <code>X_FRAME_OPTIONS</code> 设置是否存在，并确保其值为 <code>&#39;SAMEORIGIN&#39;</code>。在你的 <code>settings.py</code> 文件中添加或修改以下代码：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">X_FRAME_OPTIONS = <span class="hljs-string">&#x27;SAMEORIGIN&#x27;</span><br></code></pre></td></tr></table></figure><p>这将确保 Django 在响应头中设置 <code>X-Frame-Options</code> 为 <code>&#39;SAMEORIGIN&#39;</code>，允许该网站在相同的 origin 下被嵌入到 <code>&lt;iframe&gt;</code> 中。</p><ol><li>保存并重启你的 Django 项目，然后再次尝试访问网站，看看是否仍然出现相同的错误。</li></ol><p>如果你依然遇到问题，确保你已经正确地配置了以上步骤，并检查 Django 版本是否支持该配置项。</p><p>请注意，修改 <code>X_FRAME_OPTIONS</code> 设置可能会影响网站的安全性，因此在修改设置之前，请确保你了解该设置可能带来的潜在风险，并根据具体情况进行设置。</p><h4 id="二、viedo时间"><a href="#二、viedo时间" class="headerlink" title="二、viedo时间"></a>二、viedo时间</h4><p>要获取一个视频的时间，你可以使用Python中的第三方库<code>moviepy</code>。</p><p>首先，确保你已经安装了<code>moviepy</code>库。你可以使用以下命令来安装它：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> moviepy<br></code></pre></td></tr></table></figure><p>接下来，可以使用以下代码来获取视频的时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> moviepy.editor <span class="hljs-keyword">import</span> VideoFileClip<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_video_duration</span>(<span class="hljs-params">file_path</span>):<br>    video = VideoFileClip(file_path)<br>    duration = video.duration<br>    <span class="hljs-keyword">return</span> duration<br><br><span class="hljs-comment"># 指定视频文件路径，并调用函数获取时间</span><br>file_path = <span class="hljs-string">&quot;path/to/your/video.mp4&quot;</span>  <span class="hljs-comment"># 替换为你的视频文件路径</span><br>duration = get_video_duration(file_path)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;视频时长:&quot;</span>, duration, <span class="hljs-string">&quot;秒&quot;</span>)<br></code></pre></td></tr></table></figure><p>在代码中，我们定义了一个名为<code>get_video_duration</code>的函数来获取视频的时长。该函数接受视频文件的路径，并使用<code>VideoFileClip</code>类加载视频。然后，我们可以使用<code>duration</code>属性来获取视频的时长（以秒为单位）。</p><p>请注意，代码中需要替换<code>file_path</code>变量的值为你要获取时间的视频的实际路径。另外，<code>moviepy</code>库还提供了其他功能，比如剪辑视频、提取音频等操作，你可以根据需要进行进一步的学习和使用。</p><p>要根据视频的时长将其格式化为不同的时间显示格式，你可以使用Python中的<code>datetime</code>模块来实现。</p><p>以下是一个示例代码，根据视频的时长将其格式化为不同的时间显示格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> moviepy.editor <span class="hljs-keyword">import</span> VideoFileClip<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">format_duration</span>(<span class="hljs-params">duration</span>):<br>    <span class="hljs-keyword">if</span> duration &lt; <span class="hljs-number">3600</span>:  <span class="hljs-comment"># 小于一小时</span><br>        time_format = <span class="hljs-string">&quot;%M:%S&quot;</span><br>    <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 大于一小时</span><br>        time_format = <span class="hljs-string">&quot;%H:%M:%S&quot;</span><br><br>    formatted_duration = <span class="hljs-built_in">str</span>(datetime.timedelta(seconds=duration))<br>    formatted_duration = datetime.datetime.strptime(formatted_duration, <span class="hljs-string">&quot;%H:%M:%S&quot;</span>).time().strftime(time_format)<br>    <span class="hljs-keyword">return</span> formatted_duration<br><br><span class="hljs-comment"># 指定视频文件路径，并调用函数获取时间并格式化</span><br>file_path = <span class="hljs-string">&quot;path/to/your/video.mp4&quot;</span>  <span class="hljs-comment"># 替换为你的视频文件路径</span><br>video = VideoFileClip(file_path)<br>duration = video.duration<br>formatted_duration = format_duration(duration)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;视频时长:&quot;</span>, formatted_duration)<br></code></pre></td></tr></table></figure><p>在代码中，我们定义了一个名为<code>format_duration</code>的函数。如果视频的时长小于3600秒（即一小时），我们使用<code>&quot;%M:%S&quot;</code>格式（分钟:秒）来格式化时间。否则，我们使用<code>&quot;%H:%M:%S&quot;</code>格式（小时:分钟:秒）。然后，我们将视频时长转换为<code>datetime.timedelta</code>对象，并使用<code>strptime</code>和<code>strftime</code>方法来将其格式化。</p><p>同样，请注意替换<code>file_path</code>变量的值为你要获取时间的视频的实际路径。</p><p>这样，无论视频的时长是小于一小时还是大于一小时，输出的时间格式将相应地进行格式化。</p><h3 id="数据库修改"><a href="#数据库修改" class="headerlink" title="##数据库修改##"></a>##数据库修改##</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> django.db.models.signals <span class="hljs-keyword">import</span> pre_save<br><span class="hljs-keyword">from</span> django.dispatch <span class="hljs-keyword">import</span> receiver<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> timedelta<br><span class="hljs-keyword">from</span> moviepy.editor <span class="hljs-keyword">import</span> VideoFileClip<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Lesson</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;课程中的单节课类&quot;&quot;&quot;</span><br>    course = models.ForeignKey(Course, on_delete=models.CASCADE)<br>    title = models.CharField(max_length=<span class="hljs-number">100</span>)<br>    video = models.FileField(upload_to=<span class="hljs-string">&#x27;lessons/&#x27;</span>)<br>    seenum = models.IntegerField(default=<span class="hljs-number">0</span>)<br>    sequence = models.PositiveIntegerField()  <span class="hljs-comment"># 正整数，课程中课的顺序</span><br>    duration = models.DurationField(null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 视频时长</span><br><br><span class="hljs-meta">@receiver(<span class="hljs-params">pre_save, sender=Lesson</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_duration</span>(<span class="hljs-params">sender, instance, **kwargs</span>):<br>    <span class="hljs-keyword">if</span> instance.video:<br>        <span class="hljs-comment"># 使用moviepy获取视频时长</span><br>        video_path = instance.video.path<br>        clip = VideoFileClip(video_path)<br>        duration = clip.duration<br>        clip.close()<br><br>        <span class="hljs-comment"># 转换为timedelta对象并赋值给duration字段</span><br>        instance.duration = timedelta(seconds=duration)<br><br>pre_save.connect(calculate_duration, sender=Lesson)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>valine评论系统</title>
    <link href="/2023/08/19/valine/"/>
    <url>/2023/08/19/valine/</url>
    
    <content type="html"><![CDATA[<h2 id="valine评论系统"><a href="#valine评论系统" class="headerlink" title="valine评论系统"></a>valine评论系统</h2><ul><li><h3 id="Valine-opens-new-window-基于-LeanCloud"><a href="#Valine-opens-new-window-基于-LeanCloud" class="headerlink" title="Valine (opens new window):基于 LeanCloud"></a><strong><a href="https://valine.js.org/configuration.html">Valine (opens new window)</a>:基于 <a href="https://console.leancloud.cn/">LeanCloud</a></strong></h3></li></ul><h3 id="第一步：注册Leancloud"><a href="#第一步：注册Leancloud" class="headerlink" title="第一步：注册Leancloud"></a>第一步：注册Leancloud</h3><p><img src="/../img/valine/image-20230819222800671.png" alt="image-20230819222800671"></p><p>获取 AppID 和 AppKey</p><p><img src="/../img/valine/image-20230819222915512.png" alt="image-20230819222915512"></p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>Valine 诞生于2017年8月7日，是一款基于<a href="https://leancloud.cn/">LeanCloud</a>的快速、简洁且高效的无后端评论系统。</p><p>理论上支持但不限于静态博客，目前已有<a href="https://valine.js.org/hexo.html">Hexo</a>、<a href="https://valine.js.org/jekyll.html">Jekyll</a>、<a href="http://typecho.org/">Typecho</a>、<a href="https://gohugo.io/">Hugo</a>、<a href="https://ghost.org/">Ghost</a>、<a href="https://github.com/daidi/docsify-valine/">Docsify</a> 等博客和文档程序在使用Valine。</p><ul><li>快速</li><li>安全</li><li>Emoji 😉</li><li>无后端实现</li><li>MarkDown 全语法支持</li><li>轻量易用</li><li><a href="https://valine.js.org/visitor.html">文章阅读量统计</a> <code>v1.2.0+</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>valine</tag>
      
      <tag>评论</tag>
      
      <tag>随笔</tag>
      
      <tag>使用记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git常用命令</title>
    <link href="/2023/08/19/git/"/>
    <url>/2023/08/19/git/</url>
    
    <content type="html"><![CDATA[<h2 id="ssh免密登录"><a href="#ssh免密登录" class="headerlink" title="ssh免密登录"></a>ssh免密登录</h2><p><code> ssh-keygen</code>默认是存在<code>~/.ssh/id_rsa.pub</code></p><p><img src="/../img/git/image-20230819132527663.png" alt="image-20230819132527663"></p><p>然后把获取到的公钥注册到gitte</p><p><img src="/../img/git/image-20230819132346153.png" alt="image-20230819132346153"></p><h2 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h2><h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a><strong>建立连接</strong></h3><p>前面进行了ssh免密登录，此时选择git,而不要选择https</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">git init<br>git remote add origin git@....<br></code></pre></td></tr></table></figure><p>取消之前的链接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git remote remove origin<br></code></pre></td></tr></table></figure><h3 id="经常执行"><a href="#经常执行" class="headerlink" title="经常执行"></a><strong>经常执行</strong></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git add .<br>git commit -m <span class="hljs-string">&#x27;备注&#x27;</span><br>git push origin master<br></code></pre></td></tr></table></figure><h3 id="扒取"><a href="#扒取" class="headerlink" title="扒取"></a><strong>扒取</strong></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> git@gitee.com:....<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>常用命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用记录</title>
    <link href="/2023/08/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2023/08/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo使用记录"><a href="#Hexo使用记录" class="headerlink" title="Hexo使用记录"></a>Hexo使用记录</h2><h3 id="一、发表博文"><a href="#一、发表博文" class="headerlink" title="一、发表博文"></a><strong>一、发表博文</strong></h3><p><strong>1、新建博文</strong></p><p>打开terminal，cd到对应的文件夹，例如我是myblog，输入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">hexo new &#x27;文章题目&#x27;<br></code></pre></td></tr></table></figure><p><strong>2、新建页面</strong></p><p>输入这一句：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">hexo new page &#x27;页面名称&#x27;<br></code></pre></td></tr></table></figure><h3 id="二、博文配置"><a href="#二、博文配置" class="headerlink" title="二、博文配置"></a>二、博文配置</h3><p><strong>1、图片配置</strong></p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/image-20230818235019700.png" alt="image-20230818235019700"></p><p>博文中使用的图片需要提前准备到<code>source</code>文件夹中</p><p><strong>2、属性配置</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">title: Hexo使用记录                             <br><span class="hljs-section"># 博文的名称</span><br>date: 2023-08-18 23:28:02   <br><span class="hljs-section"># 博文的发布时间</span><br>index<span class="hljs-emphasis">_img: /img/第一篇文章/hexo.jpg              </span><br><span class="hljs-emphasis"># 首页博文的图片</span><br><span class="hljs-emphasis">author: 阿杰</span><br><span class="hljs-emphasis"># 博文的作者</span><br><span class="hljs-emphasis">categories:</span><br><span class="hljs-emphasis"># 博文的分类</span><br><span class="hljs-emphasis">- 随笔</span><br><span class="hljs-emphasis">tags:</span><br><span class="hljs-emphasis"># 博文的标签</span><br><span class="hljs-emphasis">layout: about</span><br><span class="hljs-emphasis"># 建议加上，不然很多样式不会显现</span><br><span class="hljs-emphasis">comment: true</span><br><span class="hljs-emphasis"># 用来控制评论的开关</span><br></code></pre></td></tr></table></figure><h3 id="三、部署与更新"><a href="#三、部署与更新" class="headerlink" title="三、部署与更新"></a>三、部署与更新</h3><p>要将Hexo博客部署到GitHub Pages上，你可以按照以下步骤进行操作：</p><ol><li>创建GitHub仓库：<ul><li>在GitHub上创建一个新的仓库，仓库名为<code>&lt;username&gt;.github.io</code>（其中<code>&lt;username&gt;</code>是你的GitHub用户名）。</li><li>选择“Public”（公开）选项，以使你的网站可以在互联网上访问。</li></ul></li><li>安装Hexo：<ul><li>确保你已经在本地安装了Node.js和Hexo。</li><li>使用命令提示符或终端进入你的Hexo项目的根目录。</li></ul></li><li>配置Hexo：<ul><li>打开Hexo项目的 <code>_config.yml</code> 文件，找到 <code>deploy</code> 部分。</li><li>设置 <code>type</code> 为 <code>git</code>。</li><li>设置 <code>repo</code> 为你在第1步中创建的仓库的URL地址，格式为 <code>https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</code>。</li></ul></li><li>部署到GitHub Pages：<ul><li>运行以下命令将你的Hexo网站生成为静态文件：<code>hexo generate</code> 或 <code>hexo g</code>。</li><li>运行以下命令将生成的静态文件部署到GitHub Pages：<code>hexo deploy</code> 或 <code>hexo d</code>。</li></ul></li></ol><p>现在，你的Hexo博客网站已经部署到了GitHub Pages上。你可以通过访问 <code>https://&lt;username&gt;.github.io</code>（其中<code>&lt;username&gt;</code>是你的GitHub用户名）来查看你的网站。</p><p>记住，每次更新博客时，你需要运行 <code>hexo generate</code> 和 <code>hexo deploy</code> 命令来重新生成和部署你的网站。</p><h3 id="四、SEO优化"><a href="#四、SEO优化" class="headerlink" title="四、SEO优化"></a>四、SEO优化</h3><ol><li>修改博客标题和描述：<br>在 Hexo 项目根目录的 <code>_config.yml</code> 文件中，可以找到 <code>title</code> 和 <code>description</code> 字段，将其设置为你博客的标题和描述，这将显示在搜索引擎结果中。</li><li>添加网页关键字：<br>在 <code>_config.yml</code> 文件中，找到 <code>keywords</code> 字段，设置与你的博客内容相关的关键字，这有助于搜索引擎识别和索引你的内容。</li><li>生成友好的 URL：<br>在 <code>_config.yml</code> 文件中，找到 <code>permalink</code> 字段，设置为 <code>:year/:month/:day/:title/</code>，这将生成符合 SEO 要求的 URL。</li><li>优化文章标签和分类：<br>在 Hexo 发布的文章中，为每篇文章添加合适的标签和分类。这有助于搜索引擎和读者更好地了解你的内容结构。</li><li>生成 sitemap：<br>安装 Hexo 的 <code>hexo-generator-seo-friendly-sitemap</code> 插件，通过添加该插件到 Hexo 的配置文件中，可以生成网站地图，方便搜索引擎爬取和索引你的页面。</li><li>使用合适的标题标签（H1、H2、H3等）：<br>在博客文章中，使用适当的标题标记，比如用 H1 标签包裹文章标题，用 H2 和 H3 标签包裹子标题。这有助于搜索引擎理解你的内容结构。</li><li>添加 meta 标签：<br>可以使用 Hexo 插件 <code>hexo-meta-generator</code> 来自动生成 meta 标签，包括页面标题、描述、关键字等。这有助于搜索引擎抓取和索引你的页面。</li><li>使用友好的图片名和 alt 属性：<br>在使用图片时，使用描述性的文件名，并为每张图片添加合适的 alt 属性，这可以提高图片在搜索引擎中的可视性。</li></ol><h3 id="五、参考文档"><a href="#五、参考文档" class="headerlink" title="五、参考文档"></a>五、参考文档</h3><p><a href="https://github.com/fluid-dev/hexo-theme-fluid"><strong>Hexo Fluid 主题地址</strong></a></p><p><a href="https://hexo.fluid-dev.com/docs/"><strong>Hexo Fluid 用户手册</strong></a></p><p><a href="https://hunsh.net/"><strong>Hunsh’s Blog</strong></a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>使用记录</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
